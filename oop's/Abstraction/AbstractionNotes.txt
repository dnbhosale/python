Abstract Classes in Python
==================================
An abstract class can be considered as a blueprint for other classes. 
It allows you to create a set of methods that must be created within any child classes built from the abstract class. 
A class which contains one or more abstract methods is called an abstract class. 
An abstract method is a method that has a declaration but does not have an implementation. 
While we are designing large functional units we use an abstract class
. When we want to provide a common interface for different implementations of a component, we use an abstract class. 

-----------------------------
Why use Abstract Base Classes : 
------------------------------------------------
By defining an abstract base class, you can define a common Application Program Interface(API) for a set of subclasses.
 This capability is especially useful in situations where a third-party is going to provide implementations, 
such as with plugins, but can also help you when working in a large team or with a large code-base where keeping all 
classes in your mind is difficult or not possible. 
--------------------------------------
How Abstract Base classes work : 
--------------------------------------
By default, Python does not provide abstract classes. 
Python comes with a module that provides the base for defining Abstract Base classes(ABC) and that module name is ABC. 
ABC works by decorating methods of the base class as abstract and then registering concrete classes as implementations of the abstract base. 
A method becomes abstract when decorated with the keyword @abstractmethod.
-------------------------------
pass keyword
----------------------------
In Python programming, the pass statement is a null statement which can be used as a placeholder for future code.

Suppose we have a loop or a function that is not implemented yet, but we want to implement it in the future. In such cases, we can use the pass statement.

The syntax of the pass statement is:

pass
------------------------------------------------------
Concrete Methods in Abstract Base Classes : 
Concrete classes contain only concrete (normal)methods whereas abstract classes may contain both concrete methods and abstract methods.
The concrete class provides an implementation of abstract methods,
 the abstract base class can also provide an implementation by invoking the methods via super(). 
--------------------------------------------------
Abstract Class Instantiation : 
Abstract classes are incomplete because they have methods that have nobody.
 If python allows creating an object for abstract classes then using that object if anyone calls the abstract method,
 but there is no actual implementation to invoke. So we use an abstract class as a template and according to the need,
 we extend it and build on it before we can use it. Due to the fact, an abstract class is not a concrete class, it cannot be instantiated. 
When we create an object for the abstract class it raises an error. 
-----------------------------------------------------------------